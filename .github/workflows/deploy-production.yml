name: Deploy Production ðŸš€

on:
  release:
    types: [published, edited]

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}

      - name: Extract Tag
        id: extract_tag
        run: echo "TAG=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Run deployment script on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          script: |
            set -e
            APP_PROD_PATH="/home/ubuntu/production"
            if [ -d "$APP_PROD_PATH" ]; then
              cd $APP_PROD_PATH
              sudo docker-compose -p production down --remove-orphans --timeout 60 || true
              git pull origin main
            else
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git clone ${{ secrets.GIT_URL }} $APP_PROD_PATH
              cd $APP_PROD_PATH
            fi
            touch .env
            echo "MINIO_PROD_ENDPOINT=${{ secrets.MINIO_PROD_ENDPOINT }}" >> .env
            echo "MINIO_PROD_ACCESS_KEY=${{ secrets.MINIO_PROD_ACCESS_KEY }}" >> .env
            echo "MINIO_PROD_SECRET_KEY=${{ secrets.MINIO_PROD_SECRET_KEY }}" >> .env
            echo "APP_PROD_PORT_1=${{ secrets.APP_PROD_PORT_1 }}" >> .env
            echo "APP_PROD_PORT_2=${{ secrets.APP_PROD_PORT_2 }}" >> .env
            echo "APP_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pacmusic" >> .env
            echo "APP_TAG=${{ env.TAG }}" >> .env
            echo "PROD_URL=${{ secrets.PROD_URL }}" >> .env
            cat .env
            # Stop and remove only production containers to avoid conflicts
            sudo docker stop pacmusic-prod-1 pacmusic-prod-2 nginx-loadbalancer || true
            sudo docker rm pacmusic-prod-1 pacmusic-prod-2 nginx-loadbalancer || true
            sudo docker-compose -p production --env-file .env pull pacmusic-prod-1 pacmusic-prod-2 nginx
            sudo docker-compose -p production --env-file .env up --detach pacmusic-prod-1 pacmusic-prod-2 nginx
            sudo docker-compose -p production --env-file .env logs pacmusic-prod-1 pacmusic-prod-2 nginx-loadbalancer || true

      - name: Wait for the application to start
        run: sleep 30

      - name: Test Hit Endpoint
        run: |
          curl -f "${{ secrets.PROD_URL }}:${{ secrets.APP_PROD_PORT_1 }}"
          curl -f "${{ secrets.PROD_URL }}:${{ secrets.APP_PROD_PORT_2 }}"

      - name: Debug Secrets
        run: |
          echo "PROD_URL: ${{ secrets.PROD_URL }}"
          echo "APP_PROD_PORT_1: ${{ secrets.APP_PROD_PORT_1 }}"
          echo "APP_PROD_PORT_2: ${{ secrets.APP_PROD_PORT_2 }}"
          echo "STG_URL: ${{ secrets.STG_URL }}"
          echo "APP_STG_PORT_1: ${{ secrets.APP_STG_PORT_1 }}"
          echo "APP_STG_PORT_2: ${{ secrets.APP_STG_PORT_2 }}"
