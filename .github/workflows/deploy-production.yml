name: Deploy Production ðŸš€

on:
  release:
    types: [published, edited]

jobs:
  deploy-to-production:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Add SSH key to the agent
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
        run: |
          echo "$SSH_PRIVATE_KEY" > keyfile
          chmod 600 keyfile
          eval "$(ssh-agent -s)"
          ssh-add keyfile
          mkdir -p ~/.ssh
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      - name: Ensure SSH key is set up correctly
        run: |
          ssh -i keyfile -o StrictHostKeyChecking=no ubuntu@${{ secrets.SSH_HOST_PRODUCTION }} exit 0

      - name: Run deployment script on production server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          script: |
            APP_PROD_PATH="/home/ubuntu/production"
            echo "APP_PROD_PATH: $APP_PROD_PATH"
            echo "Checking if directory exists..."
            if [ ! -d "$APP_PROD_PATH" ]; then
              echo "Directory does not exist. Cloning repository..."
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git clone git@github.com:dwididit/music-streaming.git $APP_PROD_PATH
            else
              echo "Directory exists. Pulling latest changes..."
              cd $APP_PROD_PATH
              sudo docker-compose down --remove-orphans --timeout 60 pacmusic-prod || true
              git pull origin main
            fi
            cd $APP_PROD_PATH
            echo "Current directory: $(pwd)"
            echo "Directory listing: $(ls -al)"
            echo "Ensuring docker-compose.yaml exists..."
            if [ ! -f "docker-compose.yaml" ]; then
              echo "Error: docker-compose.yaml not found in $(pwd)"
              exit 1
            fi

            # Ensure a .gitconfig exists
            touch ~/.gitconfig
            echo "[user]" >> ~/.gitconfig
            echo "    email = didit@dwidi.com" >> ~/.gitconfig
            echo "    name = Dwi Didit Prasetiyo" >> ~/.gitconfig

            # Create the .env file with the environment variables
            cat <<EOT > .env
            MINIO_PROD_ENDPOINT=api-prod.minio-devops-class.pacmann.ai
            MINIO_PROD_ACCESS_KEY=1EApWjUnu7YPW8XGU9K8
            MINIO_PROD_SECRET_KEY=yS9awRgYZ0zJAq69fwlYhZSYj5ypzoCB3Z2oLlOF
            APP_PROD_PORT=5000
            EOT

            sudo docker-compose down --remove-orphans --timeout 60 pacmusic-prod || true
            git pull origin main

            sudo docker-compose --profile prod up --build -d pacmusic-prod

      - name: Wait for the application to start
        run: sleep 10

      - name: Test Hit Endpoint
        run: |
          curl -f ${{ secrets.PROD_URL }}
